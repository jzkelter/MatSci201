undirected-link-breed [atom-links atom-link] ; links between atoms

globals [
  prev-atom-viz-size  ; previous atom viz size
  LJ-force-cutoff-values  ; since sizes can change, we store the cutoff adjustment values for different sizes of atom pairs
  LJ-pot-cutoff-values  ; since sizes can change, we store the cutoff adjustment values for different sizes of atom pairs
  message1 ; this variable holds a turtle for displaying messages.
  message2 ; this variable holds a turtle for displaying messages.
]

;;;;;;;;;;;;;;;;;;;;;;
;; Setup Procedures ;;
;;;;;;;;;;;;;;;;;;;;;;

to ch5.setup-atoms-and-links-and-force-lines
  let x-dist r-min ; the distance between atoms in the x direction
  let y-dist sqrt (x-dist ^ 2 - (x-dist / 2) ^ 2)

  setup-atoms x-dist y-dist
  
  vb.setup-links
end

to ch5.setup-LJ
  set LJ-pot-cutoff-values n-values 41 [0]  ; initialize to zeros so zero as cutoff value will be used in the calculation on next line
  set LJ-force-cutoff-values n-values 41 [0] ; initialize to zeros so zero as cutoff value will be used in the calculation on next line

  set LJ-pot-cutoff-values map  [s -> first LJ-potential-and-force cutoff-dist s s] (range 0 2.05 .05)  ; calculate cutoff values to adjust LJ potential various sigma values
  set LJ-force-cutoff-values map  [s -> last LJ-potential-and-force cutoff-dist s s] (range 0 2.05 .05)  ; calculate cutoff values to adjust LJ for various sigma values
end

to ch5.setup-messages
  crt 1 [
    setxy 2.5 2.5
    set size 0
    set message1 self
  ]
  crt 1 [
    setxy 3 2.25
    set size 0
    set message2 self
  ]
end

;setup-atoms somewhere here

to ch5.init-atom
  set shape "circle"
  set base-color blue
  set color blue
  set mass 1
  set sigma 1
  set pinned? False
  set selected? false
  set-size
end


;;*******************************************************
;;**************** Go Procedures ************************
;;*******************************************************

to simulate
  update-atom-size-viz

  ask atom-links [ die ]

  ; moving happens before velocity and force update in accordance with velocity verlet
  ask atoms with [not pinned?] [move]

  ask atoms [update-force-and-velocity-and-links]

  control-temp

  ask atom-links [vb.color-links]  ; stylizing/coloring links

  tick-advance dt
  update-plots
end



;; *****************************************************
;; *********** Molecular Dynamics Procedures ***********
;; *****************************************************

to move  ; atom procedure, uses velocity-verlet algorithm
  let new_x mdc.velocity-verlet-pos xcor vx (fx / mass)
  let new_y mdc.velocity-verlet-pos ycor vy (fy / mass)

  ifelse new_x < max-pxcor and new_x > min-pxcor [
    set xcor new_x
  ] [
    ; if the atoms would have moved off the screen, we don't move and set velocity to zero
    set vx 0
  ]

  ifelse new_y < max-pycor and new_y > min-pycor [
    set ycor new_y
  ] [
    ; if the atoms would have moved off the screen, we don't move and set velocity to zero
    set vy 0
  ]
end

to update-force-and-velocity-and-links
  let n-fx 0
  let n-fy 0
  let total-potential-energy 0
  let in-radius-atoms other atoms in-radius cutoff-dist
  ask in-radius-atoms [
    ; each atom calculates the force it feels from its
    ; neighboring atoms and sums these forces
    let r distance myself
    let indiv-pot-E-and-force (LJ-potential-and-force r sigma [sigma] of myself)
    let force last indiv-pot-E-and-force
    set total-potential-energy total-potential-energy + first indiv-pot-E-and-force
    face myself
    rt 180
    set n-fx n-fx + (force * dx)
    set n-fy n-fy + (force * dy)
    ]
  set pot-E total-potential-energy / 2  ; divide by 2 to not double count pot-E for each atom


  ; updating velocity and force
  if not pinned? [
    set vx mdc.velocity-verlet-velocity vx (fx / mass) (n-fx / mass)
    set vy mdc.velocity-verlet-velocity vy (fy / mass) (n-fy / mass)
    set fx n-fx
    set fy n-fy
  ]

  update-atom-color pot-E
  
  vb.update-links in-radius-atoms
end

to control-temp
  let ctemp current-temp
  (ifelse
    ctemp = 0 and temp != 0 [
      ask atoms [mdc.init-velocity]
    ]
    ctemp != 0 [
      let scale-factor sqrt( temp / ctemp )  ; if "external" temperature is higher atoms will speed up and vice versa
      ask atoms [
        set vx vx * scale-factor
        set vy vy * scale-factor
      ]
    ]
  )
end

to-report current-temp
  report (1 / (2 * Kb)) * mean [mass * (vx ^ 2 + vy ^ 2)] of atoms with [not pinned?]
end


;; *****************************************************
;; ****** Lennard-Jones Potential/Force Procedures *****
;; *****************************************************

to-report LJ-potential-and-force [ r sigma1 sigma2] ; for the force, positive = attractive, negative = repulsive
  let sig (sigma1 + sigma2) / 2
  let third-power (sig / r) ^ 3
  let sixth-power third-power ^ 2
  let twelfth-power sixth-power ^ 2
  let force (-48 * eps / r ) * (twelfth-power - (1 / 2) * sixth-power) - LJ-force-cutoff sig
  let potential (4 * eps * (twelfth-power - sixth-power)) - LJ-pot-cutoff sig
  report list potential force
end


to-report calc-PE
  let U 0  ;; U stands for PE

  ask other atoms in-radius cutoff-dist [
    set U U + calc-pair-PE-with myself
  ]
  report U
end

to-report calc-pair-PE-with [other-atom]
  let PE-and-force LJ-potential-and-force (distance other-atom) sigma  [sigma] of other-atom
  report first PE-and-force
end


to-report LJ-force-cutoff [sig]
  report item round (sig / .05) LJ-force-cutoff-values
end

to-report LJ-pot-cutoff [sig]
  report item round (sig / .05) LJ-pot-cutoff-values
end


;; *****************************************************
;; *********      Interaction Procedures      **********
;; *****************************************************

to change-atom-size [change]
  ask atoms with [selected?] [
    set sigma max list 0.2 (sigma + change)
    set mass sigma ^ 2  ; mass is proportional to radius squared (because in 2D)
    set-size
  ]
end


;; *****************************************************
;; ********* Atom and Link Display procedures **********
;; *****************************************************

to update-atom-color [atom-PE] ; updating atom color

  ifelse color-atoms-by-potential-energy? [
    set color scale-color color  atom-PE -6 0
  ] [
    set color base-color
  ]

end


to set-shape
  ifelse selected? [
    ;set shape "circle 2"
    set shape "circle-s"
  ] [
    set shape "circle"
  ]
end

to update-atom-size-viz
  if atom-viz-size != prev-atom-viz-size [
    ask atoms [set-size]
  ]
  set prev-atom-viz-size  atom-viz-size
end

to set-size
  set size sigma * atom-viz-size
end