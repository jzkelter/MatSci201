breed [fl-ends fl-end] ; turtles at the ends of the force lines, point in direction the force is acting
undirected-link-breed [fl-links fl-link] ; force line links
undirected-link-breed [atom-links atom-link] ; links between atoms
undirected-link-breed [wall-links wall-link] ; force line links

globals [
  link-check-dist ; each atom links with neighbors within this distance
  prev-lattice-view ; the lattice view in the previous time step
  upper-left-fl ; upper left force line - shear
  left-fl ; left force line - compression
  right-fl; right force line - tension
  left-edge; where the right side of the sample is (xcor) - tension
  right-edge ; where the right side of the sample is (xcor) - compression
  orig-length ; original length of sample
  prev-length ; length of sample in previous time step
  unpinned-min-ycor ; min unpinnned ycor for shear
  top-neck-atoms ; agentset of atoms on the top of the neck (thin region) (tension).
                 ; Used in calculating stress
  bottom-neck-atoms ; agentset of atoms on the bottom of the neck (thin region) (tension).
                    ; Used in calculating stress
  num-forced-atoms ; number of atoms receiving external force directly
  unpinned-atoms ; atoms that are not pinned
  auto-increment-force ; force to counteract LJ forces in the x-direction (tension)
  cross-section
  ceiling-ycor
  floor-ycor
  
  
  ; globals that are in mdc.nls:
  ; eps ; used in LJ force. Well depth; measure of how strongly particles attract each other
  ; sigma ; used in LJ force. Distance at which intermolecular potential between 2 particles is 0
  ; cutoff-dist ; each atom is influenced by its neighbors within this distance (LJ force)
  ; dt ; time step for the velocity verlet algorithm
  ; kb ; boltzmann constant, arbitrary here
]


;;;;;;;;;;;;;;;;;;;;;;
;; Setup Procedures ;;
;;;;;;;;;;;;;;;;;;;;;;

to setup-constants
  set dt .1
  set r-min  2 ^ (1 / 6)
  set eps 0.07
  set cutoff-dist 5
  set kb 0.0002 ; this is a very small number right now
  set link-check-dist 1.5
end

to setup-atoms-and-links-and-force-lines
  ; making a symmetrical sample for tension mode
  if force-mode = "Tension" and atoms-per-column mod 2 = 0 [
    set atoms-per-column atoms-per-column + 1
  ]
  create-atoms atoms-per-row * atoms-per-column [
    set shape "circle"
    set color blue
    set mass 1
    set sigma .899 ; starts stress-strain curve at about 0
    set pinned? False
    set ex-force-applied? False
  ]
  let x-dist 1 ; the distance between atoms in the x direction
  let y-dist sqrt (x-dist ^ 2 - (x-dist / 2) ^ 2) ; the distance between rows
  let ypos (- atoms-per-column * y-dist / 2) ;the y position of the first atom
  let xpos (- atoms-per-row * x-dist / 2) ;the x position of the first atom
  let row-number 0 ; row number, starts at 0 for easy modulo division
  ask atoms [ ; setting up the HCP structure
    if xpos >= (atoms-per-row * x-dist / 2)  [ ; condition for starting new row
      set row-number row-number + 1
      set xpos (- atoms-per-row * x-dist / 2) + (row-number mod 2) * x-dist / 2
      set ypos ypos + y-dist
    ]
    setxy xpos ypos
    set xpos xpos + x-dist
  ]

  ; values used in assigning atom positions
  let ymax max [ycor] of atoms
  let xmax max [xcor] of atoms
  let y-min min [ycor] of atoms
  let x-min min [xcor] of atoms

  (ifelse force-mode = "Shear"[
    set unpinned-min-ycor y-min + 3
    ask atoms with [
      (
        (xcor = x-min or
          xcor = x-min + (1 / 2) or
          xcor = xmax or
          xcor = xmax - (1 / 2)
        )
        and
        ( ycor < unpinned-min-ycor)
      )
    ] [
      set pinned? True
      ]
    ]
    force-mode = "Tension"[
      ask atoms with [xcor = x-min] [die] ; creating the symmetrical shape
      set x-min min [xcor] of atoms
      ask atoms with [
        (ycor >= ymax - 1 or ycor <= y-min + 1) and
         xcor <= xmax - 2.5 and
         xcor >= x-min + 2.5
      ] [ die ]

      ask atoms with [xcor = x-min or xcor = x-min + .5 ] [set pinned? True]
      ; defining top and bottom neck agentsets
      set top-neck-atoms atoms with [xcor <= xmax - 3.5 and xcor >= x-min + 3.5] with-max [ycor]
      set bottom-neck-atoms atoms with [xcor <= xmax - 3.5 and xcor >= x-min + 3.5] with-min [ycor]
      ask atoms with [ xcor <= xmax and xcor >= xmax - 1.5 ][
        set ex-force-applied? True
        set shape "circle-dot"
      ]
      set num-forced-atoms count atoms with [ex-force-applied?]
    ]
    force-mode = "Compression" [
      ask atoms with [xcor = xmax or xcor = xmax - .5 ] [set pinned? True]
    ]
  )

  if create-dislocation? = True [ ; creating the dislocation
    let median-xcor (median [xcor] of atoms)
    let median-ycor (median [ycor] of atoms)
    let ii 0
    while [ median-ycor <= ceiling (ymax) ] [
      ask atoms with [
        ycor <= median-ycor + y-dist * .75
        and ycor >= median-ycor ] [
        (ifelse xcor <= median-xcor + x-dist * .75
          and xcor >= median-xcor [ die ]
          xcor >= median-xcor [ set xcor xcor - .05 * ii ]
          xcor < median-xcor [ set xcor xcor + .05 * ii ])
        ]
      set median-ycor median-ycor + y-dist
      set median-xcor median-xcor - x-dist / 2
      set ii ii + 1
    ]
   ]
  
  ask atoms [
    let in-radius-atoms (other atoms in-radius cutoff-dist)
    update-links in-radius-atoms
  ]
  ask atom-links [ ; stylizing/coloring links
    color-links
  ]

  (ifelse force-mode = "Tension"  [ ; set up force lines
    create-fl-ends 2
    set right-fl xmax
    set left-edge x-min
    set orig-length right-fl - left-edge
    ask one-of fl-ends with [xcor = 0 and ycor = 0] [
      set xcor right-fl
      set ycor ymax + 2 ]
    ask one-of fl-ends with [xcor = 0 and ycor = 0] [
      set xcor right-fl
      set ycor y-min - 2
      create-fl-link-with one-of other fl-ends with [xcor = right-fl]]
    ask fl-ends [
      set color white
      set heading 90
    ]
    if force-mode = "Tension" [
      set prev-length orig-length
    ]
  ]
    force-mode = "Compression" [
      create-fl-ends 2
      set left-fl x-min
      set right-edge xmax
      set orig-length right-edge - left-fl
      ask one-of fl-ends with [xcor = 0 and ycor = 0] [
        set xcor left-fl
        set ycor max-pycor - 2 ]
      ask one-of fl-ends with [xcor = 0 and ycor = 0] [
        set xcor left-fl
        set ycor min-pycor + 2
        create-fl-link-with one-of other fl-ends with [xcor = left-fl]]
      ask fl-ends [
        set color white
        set heading 90
      ]
    ]
    force-mode = "Shear" [
      create-fl-ends 2
      set upper-left-fl min [xcor] of atoms with [ ycor >= unpinned-min-ycor ]
      ask one-of fl-ends with [xcor = 0 and ycor = 0] [
        set xcor upper-left-fl
        set ycor ymax + 2 ]
      ask one-of fl-ends with [xcor = 0 and ycor = 0] [
        set xcor upper-left-fl
        set ycor unpinned-min-ycor
        hide-turtle
        create-fl-link-with one-of other fl-ends]
      ask fl-ends [
        set color white
        set heading 90 ]
  ])
  ask fl-links [
    set color white
  ]
  ask atoms with [pinned?] [ set shape "circle-x"]
  set unpinned-atoms atoms with [not pinned?]
end

to setup-floor-and-ceiling
  if create-floor-and-ceiling? = True [
    let min-r 1
    set ceiling-ycor max [ycor] of atoms + min-r
    set floor-ycor min [ycor] of atoms - min-r
    
    crt 1 [
      set xcor min-pxcor
      set ycor ceiling-ycor
      ht
      hatch 1 [
        set xcor max-pxcor
        
        create-wall-link-with myself [
          set thickness .3
        ]
      ]
    ]
    
    crt 1 [
      set xcor min-pxcor
      set ycor floor-ycor
      ht
      hatch 1 [
        set xcor max-pxcor
        create-wall-link-with myself [
          set thickness .3
        ]
      ]
    ]
  ]
end

to init-velocity ; initializes velocity for each atom based on the initial temp. Creates a
                 ; random aspect in the velocity split between the x velocity and the y velocity
  ask unpinned-atoms [
    let v-avg sqrt (2 * temp * Kb / mass)
    let a random-float 1  ; a random amount of the total velocity to go the x direction
    set vx sqrt (a * v-avg ^ 2) * mdc.positive-or-negative
    set vy sqrt ( v-avg ^ 2 - vx ^ 2)  * mdc.positive-or-negative
  ]
end

to setup-cross-section
  if force-mode = "Tension" [
    let avg-max mean [ycor] of top-neck-atoms
    let avg-min mean [ycor] of bottom-neck-atoms
    set cross-section avg-max - avg-min
  ]
end

to setup-auto-increment-force
  if force-mode = "Tension" and auto-increment-force? [
    set force-applied 0
    ask atoms with [ ex-force-applied? ]  [
      set vx 0
      set vy 0
    ]
  ]
end


;;;;;;;;;;;;;;;;;;;;;;;;
;; Runtime Procedures ;;
;;;;;;;;;;;;;;;;;;;;;;;;

to delete-atoms
  if mouse-down? [
    ask atoms with [xcor <= mouse-xcor + .5 and xcor > mouse-xcor - .5
      and ycor <= mouse-ycor + .433 and ycor > mouse-ycor - .433 ] [die]
  ]
  display
end

to update-lattice-view
  (ifelse lattice-view = "large-atoms" [
    ask atoms [
      show-turtle
      set size .9
    ]
  ]
  lattice-view = "small-atoms" [
    ask atoms [
       show-turtle
       set size .6
    ]
  ]
  [; lattice-view = hide-atoms
      ask atoms [ hide-turtle ]
  ])
  set prev-lattice-view lattice-view
end

; this heats or cools the system based on the average temperature of the system compared to the set temp
to control-temp
  let ctemp (1 / (2 * Kb)) * mean [vx ^ 2 + vy ^ 2] of unpinned-atoms
  (ifelse
    ctemp = 0 and temp != 0 [
      ask atoms [init-velocity]
    ]
    ctemp != 0 [
      let scale-factor sqrt( temp / ctemp )  ; if "external" temperature is higher atoms will speed up and vice versa
      ask unpinned-atoms [
        set vx vx * scale-factor
        set vy vy * scale-factor
      ]
    ]
  )
end

to move  ; atom procedure, uses velocity-verlet algorithm
  ask unpinned-atoms [
    set xcor mdc.velocity-verlet-pos xcor vx (fx / mass)
    set ycor mdc.velocity-verlet-pos ycor vy (fy / mass)
    
    if xcor > max-pxcor or xcor < min-pxcor [
      die ; kills atoms when they move off the world
    ]
  ]
end

to calculate-fl-positions ; (calculate new force line positions)
  (ifelse force-mode = "Shear" [
      set upper-left-fl min [xcor] of atoms with [ ycor >= unpinned-min-ycor ]
      ask fl-ends [ set xcor upper-left-fl]
    ]
    force-mode = "Tension" [
      set right-fl max [xcor] of atoms
      ask fl-ends with [xcor > 0] [ set xcor right-fl ]
    ]
    force-mode = "Compression" [
      set left-fl min [xcor] of atoms
      ask fl-ends with [xcor < 0] [ set xcor left-fl ]
    ]
    )
  ifelse (force-applied + auto-increment-force) = 0 [
    ask fl-ends [ hide-turtle ]
    ask fl-links [ hide-link ]
  ]
  [
    ask fl-ends [ show-turtle ]
    ask fl-links [ show-link ]
  ]
end

; find the atoms closest to the force line that will be the ones receiving the external force
to identify-force-atoms
  (ifelse force-mode = "Shear" [
    ask atoms [ set ex-force-applied?  False ]
    let forced-atoms atoms with [ ycor >= unpinned-min-ycor and (distancexy upper-left-fl ycor) <= 1]
    set num-forced-atoms count forced-atoms
    ask forced-atoms [
      set ex-force-applied?  True
    ]
    ]
    force-mode = "Compression" [
      ask atoms [ set ex-force-applied?  False ]
      let forced-atoms atoms with [ (distancexy left-fl ycor) <= 1]
      set num-forced-atoms count forced-atoms
      ask forced-atoms [
        set ex-force-applied?  True
    ]
  ]) ; for tension, the same atoms in the left shoulder of the sample always receive the force
end

to update-force-and-velocity-and-links
  let sum-PE 0
  let new-fx 0
  let new-fy 0
  let in-radius-atoms other atoms in-radius cutoff-dist
  ask in-radius-atoms [
    ; each atom calculates the force it feels from its
    ; neighboring atoms and sums these forces
    let r distance myself
    let indiv-PE-and-force (LJ-potential-and-force r)
    let force last indiv-PE-and-force
    set sum-PE sum-PE + first indiv-PE-and-force
    face myself
    rt 180
    set new-fx new-fx + (force * dx)
    set new-fy new-fy + (force * dy)
  ]
  set atom-PE sum-PE

  set new-fy new-fy + ceiling-or-floor-force

  if not pinned? [
    ; adjusting the forces to account for any external applied forces
    let ex-force 0
    if ex-force-applied? [
      ifelse force-mode = "Tension" and auto-increment-force? [
        ; ex-force is enough to cancel out any force plus a little more
        set ex-force ( - new-fx + 0.001 )
        ; auto-increment-force reports total ex-force
        set auto-increment-force auto-increment-force + ex-force
        ; set new-fy 0
      ]
      [ 
        set shape "circle-dot"
        set ex-force ( force-applied / num-forced-atoms ) 
      ]
    ]
    if shape = "circle-dot" and not ex-force-applied? [ set shape "circle" ]
    set new-fx ex-force + new-fx

    ; updating velocity and force
    set vx mdc.velocity-verlet-velocity vx (fx / mass) (new-fx / mass)
    set vy mdc.velocity-verlet-velocity vy (fy / mass) (new-fy / mass)
    set fx new-fx
    set fy new-fy
  ]

  update-atom-color atom-PE
  update-links in-radius-atoms
end

to update-atom-color [total-force] ; updating atom color
  (ifelse update-atom-color? [
    set-color total-force
  ]
   [ set color blue ])
end

to update-links [in-radius-atoms] ; updating links
  if show-diagonal-right-links? [
    set heading 330
    link-with-atoms-in-cone in-radius-atoms
  ]
  if show-diagonal-left-links? [
    set heading 30
    link-with-atoms-in-cone in-radius-atoms
  ]
  if show-horizontal-links? [
    set heading 90
    link-with-atoms-in-cone in-radius-atoms
  ]
end

to link-with-atoms-in-cone [atom-set]
  let in-cone-atoms (atom-set in-cone link-check-dist 60)
    if any? in-cone-atoms [
      create-atom-link-with min-one-of in-cone-atoms [distance myself]
    ]
end

to-report ceiling-or-floor-force
  ifelse create-floor-and-ceiling? = True [
    ;; apply force in y-direction due to floor and ceiling
    let f 0
    (ifelse
      ycor > (ceiling-ycor - 2) [
        let ceiling-PE-and-force (LJ-potential-and-force (ceiling-ycor - ycor))
        set f item 1 ceiling-PE-and-force
        
      ]
      ycor < (floor-ycor + 2) [
        let floor-PE-and-force (LJ-potential-and-force (ycor - ceiling-ycor))
        set f item 1 floor-PE-and-force
      ]
    )
    report f
  ]
  [ report 0 ]
end

to-report LJ-potential-and-force [ r ] ; for the force, positive = attractive, negative = repulsive
  let third-power (sigma / r) ^ 3
  let sixth-power third-power ^ 2
  let twelfth-power sixth-power ^ 2
  let force (-48 * eps / r ) * (twelfth-power - (1 / 2) * sixth-power) + .0001
  let potential (4 * eps * (twelfth-power - sixth-power)) + .00001
  report list potential force
end

to set-color [v]
  set color scale-color blue v -.9 0
end

to-report strain ; tension only
  report ((right-fl - left-edge) - orig-length) / orig-length
end

to-report stress ; tension only
  report (((-1 * force-applied) + auto-increment-force) / cross-section)
end

to-report report-indiv-ex-force
  report (force-applied + auto-increment-force) / num-forced-atoms
end

to-report report-total-ex-force
  report force-applied + auto-increment-force
end

to color-links
  set thickness .25 ; necessary because the links die and reform every tick
  let min-eq-bond-len .991
  let max-eq-bond-len 1.00907
  (ifelse
    link-length < min-eq-bond-len [
      let tmp-len sqrt(min-eq-bond-len - link-length)
      let tmp-color extract-rgb scale-color red tmp-len 1 -.2
      set color insert-item 3 tmp-color (125 + (1 + tmp-len) * 30) ]
    link-length > max-eq-bond-len [
      let tmp-len sqrt (link-length - max-eq-bond-len)
      let tmp-color extract-rgb scale-color yellow tmp-len 1 -.2
      set color insert-item 3 tmp-color (125 + (1 + tmp-len) * 30)]
    [ let tmp-color extract-rgb white
      set color insert-item 3 tmp-color 125 ])
end