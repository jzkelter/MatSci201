globals [
  r-min
  eps
  -eps*4
  cutoff-dist
  force-offset
  PE-offset
  dt
  kb
]


;;;;;;;;;;;;;;;;;;;;;;
;; Setup Procedures ;;
;;;;;;;;;;;;;;;;;;;;;;

to mdc.setup-constants
  set dt .01
  set kb 0.1 ; just picking a random constant for Kb that makes things work reasonably
  set r-min  2 ^ (1 / 6)
  set eps 1
  set -eps*4 -4 * eps
  set cutoff-dist 2.5 * r-min
end

to mdc.setup-offsets
  set force-offset -1 * mdc.calc-force-without-offset cutoff-dist
  set PE-offset -1 * mdc.calc-pair-PE-without-offset cutoff-dist
end

to mdc.init-atom
  set shape "circle"
  set color blue
  set mass 1
  set sigma 1
  set pinned? false
end

to mdc.remove-overlap
  ask atoms [
    while [mdc.overlapping] [
      setxy random-xcor random-ycor
    ]
  ]
end

to-report mdc.overlapping
  report any? other turtles in-radius r-min
end


to mdc.init-velocity
  ask atoms [
    let v-avg sqrt (2 * temp * Kb / mass)
    let a random-float 1  ; a random amount of the total velocity to go the x direction
    set vx sqrt (a * v-avg ^ 2) * mdc.positive-or-negative
    set vy sqrt ( v-avg ^ 2 - vx ^ 2)  * mdc.positive-or-negative
  ]
end


to-report mdc.positive-or-negative
  report ifelse-value random 2 = 0 [-1] [1]
end


;;;;;;;;;;;;;;;;;;;;;;;;
;; Runtime Procedures ;;
;;;;;;;;;;;;;;;;;;;;;;;;

to mdc.move-atoms
  ifelse mdc.world-wraps-both? [
    ask atoms with [not pinned?] [mdc.move-wraps-on]
  ]
  [ ask atoms with [not pinned?] [mdc.move-wraps-off] ]
end

to-report mdc.world-wraps-both?
    report [count neighbors4] of patch max-pxcor max-pycor = 4
end

to-report mdc.world-wraps-x?
  report [count neighbors4 with [pxcor = min-pxcor]] of patch max-pxcor 0 = 1
end

to-report mdc.world-wraps-y?
  report [count neighbors4 with [pycor = min-pycor]] of patch 0 max-pycor = 1
end

to mdc.move-wraps-on  ; atom procedure
  ;; Uses velocity-verlet algorithm
  set xcor mdc.velocity-verlet-pos xcor vx (fx / mass)
  set ycor mdc.velocity-verlet-pos ycor vy (fy / mass)
end

to mdc.move-wraps-off
  ;; Uses velocity-verlet algorithm
  let new_x mdc.velocity-verlet-pos xcor vx (fx / mass)
  let new_y mdc.velocity-verlet-pos ycor vy (fy / mass)

  ifelse new_x < max-pxcor and new_x > min-pxcor [
    set xcor new_x
  ] [
    ; if the atoms would have moved off the screen, we don't move and set velocity to zero
    set vx 0
  ]

  ifelse new_y < max-pycor and new_y > min-pycor [
    set ycor new_y
  ] [
    ; if the atoms would have moved off the screen, we don't move and set velocity to zero
    set vy 0
  ]
end


to mdc.update-force-and-velocity  ; atom procedure
  let n-fx 0
  let n-fy 0
  ask other atoms in-radius cutoff-dist [
    let r distance myself
    let force mdc.calc-force r
    face myself
    rt 180
    set n-fx n-fx + (force * dx)  ; assuming mass = 1. If not, neeed to divide force by mass to get acceleration
    set n-fy n-fy + (force * dy)
  ]
  
  if not pinned? [
    set vx mdc.velocity-verlet-velocity vx (fx / mass) (n-fx / mass)
    set vy mdc.velocity-verlet-velocity vy (fy / mass) (n-fy / mass)
    set fx n-fx
    set fy n-fy
  ]

end

to mdc.scale-velocities
  let ctemp mdc.current-temp
  (ifelse
    ctemp = 0 and temp != 0 [
      ask atoms [mdc.init-velocity]
    ]
    ctemp != 0 [
      let scale-factor sqrt( temp / ctemp )  ; if "external" temperature is higher atoms will speed up and vice versa
      ask atoms [
        set vx vx * scale-factor
        set vy vy * scale-factor
      ]
    ]
  )
end

to-report mdc.current-temp
  report (1 / (2 * Kb)) * mean [vx ^ 2 + vy ^ 2] of atoms with [not pinned?]
end


;; *****************************************************
;; *********      Interaction Procedures      **********
;; *****************************************************

to mdc.drag-atoms-with-mouse  
  if mouse-down? [
    let close-atoms atoms with [mdc.distance-to-mouse < 0.5]
    if any? close-atoms [
      ask min-one-of close-atoms [mdc.distance-to-mouse] [
        let oldx xcor
        let oldy ycor
        setxy mouse-xcor mouse-ycor
        ; this is set for mdc. for now, this is affected by the duplicate LJ
        ifelse mdc.calc-PE > 1 [ ; if energy would be too high, don't let the atom go there.
          setxy oldx oldy
        ] [
          set vx 0
          set vy 0
        ]
      ]
      display
    ]
  ]
end

to-report mdc.distance-to-mouse
  report distancexy mouse-xcor mouse-ycor
end


;; *****************************************************
;; ****** Lennard-Jones Potential/Force Procedures *****
;; *****************************************************

to-report mdc.calc-force [r]
  report mdc.calc-force-without-offset r + force-offset
end

to-report mdc.calc-force-without-offset [r]  
  let r^3 r * r * r
  let r^6 r^3 * r^3
  report (-eps*4 * 6 / (r^6 * r)) * ((2 / r^6) - 1)
end

to-report mdc.calc-force-without-offset-mod [r]  
  let third-power (sigma / r) ^ 3
  let sixth-power third-power ^ 2
  let twelfth-power sixth-power ^ 2
  report (-eps*4 * 12 / r) * (twelfth-power - (1 / 2) * sixth-power)
end


to-report mdc.velocity-verlet-pos [pos v a]  ; position, velocity and acceleration
  report pos + v * dt + (1 / 2) * a * (dt ^ 2)
end

to-report mdc.velocity-verlet-velocity [v a new-a]  ; velocity, previous acceleration, new acceleration
  report v + (1 / 2) * (new-a + a) * dt
end


to-report mdc.calc-PE
  let U 0  ;; U stands for PE

  ask other atoms in-radius cutoff-dist [
    set U U + mdc.calc-pair-PE (distance myself)
  ]
  report U
end

to-report mdc.calc-pair-PE [r]
  report mdc.calc-pair-PE-without-offset r + PE-offset
end

to-report mdc.calc-pair-PE-without-offset [r]
  let rsquare r ^ 2
  let attract-term 1 / rsquare ^ 3
  let repel-term attract-term * attract-term
  ;NOTE could do this a little faster by attract-term * (attract-term -1)
  report 4 * eps * (repel-term - attract-term)
end